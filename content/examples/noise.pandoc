How does noise affect the fit?
Animations can help us explore this question.

We can start with a known function, and add noise.
Then we can fit the noisy data with a Gaussian Process model, and see how well our fit (with its uncertainty) covers the known true function.
If we repeat this exercise many times, it conveys an idea of the reliability of the fit.

Animations take this one step further, because they let us change the noise smoothly and continuously.
We still see many possible versions of the data, but now we also see something new: we can watch the fit evolve in response to the evolution of the noise.

<div id='test_noise' style='width:640px;height:480px;'></div>

<script type='text/javascript'>

function getExampleFunction()
{
  var f = (_, i) => (i % 1 === 0);
  // Drawn from Matern(nu = 5/2).
  return {
    x: [0.00000, 0.03361, 0.06723, 0.10084, 0.13445, 0.16807, 0.20168, 0.23529,
       0.26891, 0.30252, 0.33613, 0.36975, 0.40336, 0.43697, 0.47059, 0.50420,
       0.53782, 0.57143, 0.60504, 0.63866, 0.67227, 0.70588, 0.73950, 0.77311,
       0.80672, 0.84034, 0.87395, 0.90756, 0.94118, 0.97479, 1.00840, 1.04202,
       1.07563, 1.10924, 1.14286, 1.17647, 1.21008, 1.24370, 1.27731, 1.31092,
       1.34454, 1.37815, 1.41176, 1.44538, 1.47899, 1.51261, 1.54622, 1.57983,
       1.61345, 1.64706, 1.68067, 1.71429, 1.74790, 1.78151, 1.81513, 1.84874,
       1.88235, 1.91597, 1.94958, 1.98319, 2.01681, 2.05042, 2.08403, 2.11765,
       2.15126, 2.18487, 2.21849, 2.25210, 2.28571, 2.31933, 2.35294, 2.38655,
       2.42017, 2.45378, 2.48739, 2.52101, 2.55462, 2.58824, 2.62185, 2.65546,
       2.68908, 2.72269, 2.75630, 2.78992, 2.82353, 2.85714, 2.89076, 2.92437,
       2.95798, 2.99160, 3.02521, 3.05882, 3.09244, 3.12605, 3.15966, 3.19328,
       3.22689, 3.26050, 3.29412, 3.32773, 3.36134, 3.39496, 3.42857, 3.46218,
       3.49580, 3.52941, 3.56303, 3.59664, 3.63025, 3.66387, 3.69748, 3.73109,
       3.76471, 3.79832, 3.83193, 3.86555, 3.89916, 3.93277, 3.96639, 4.00000].filter(f),
    y: [-0.93716, -0.94655, -0.95652, -0.96316, -0.96618, -0.97075, -0.97994,
       -0.99692, -1.01817, -1.04225, -1.06628, -1.08682, -1.10227, -1.11513,
       -1.12874, -1.14723, -1.17214, -1.20439, -1.24593, -1.29704, -1.35480,
       -1.41638, -1.47920, -1.54069, -1.60220, -1.66198, -1.71822, -1.76952,
       -1.81294, -1.84653, -1.87058, -1.88455, -1.88971, -1.89240, -1.89594,
       -1.89760, -1.89546, -1.88500, -1.86084, -1.82166, -1.77319, -1.72271,
       -1.67543, -1.62923, -1.58101, -1.53238, -1.48396, -1.43658, -1.38843,
       -1.33980, -1.28800, -1.22881, -1.15983, -1.08232, -0.99708, -0.90743,
       -0.81500, -0.72204, -0.63137, -0.54659, -0.47071, -0.40178, -0.34067,
       -0.28696, -0.23898, -0.19530, -0.15274, -0.11022, -0.06853, -0.03215,
       0.00039, 0.03103, 0.06014, 0.08832, 0.11638, 0.14340, 0.17058, 0.19662,
       0.22265, 0.25062, 0.27982, 0.31088, 0.34090, 0.37053, 0.40355, 0.44010,
       0.47670, 0.51393, 0.55162, 0.58613, 0.61272, 0.62983, 0.63972, 0.64162,
       0.63851, 0.63324, 0.62863, 0.62593, 0.62485, 0.62287, 0.62136, 0.62120,
       0.62513, 0.63249, 0.63670, 0.63222, 0.61949, 0.60010, 0.57501, 0.54435,
       0.50505, 0.45836, 0.40800, 0.35879, 0.31160, 0.27067, 0.23439, 0.20043,
       0.17000, 0.14542].filter(f),
  };
}

function gpAugmentation(k_func, label)
{
  var sqrt_matrix;

  function update_derived_data(data)
  {
    if (!data[label])
    {
      data[label] = [];
    }

    _update_sqrt_matrix(data);
    Object.assign(
      data[label], 
      jStat(data.noise).multiply(sqrt_matrix)[0]);
  }

  function _update_sqrt_matrix(data)
  {
    // If it exists, we assume it's up to date for performance reasons.
    if (!!sqrt_matrix) { return; }

    sqrt_matrix = SymmetricSquareRoot(CovarianceMatrix(data.x, k_func));
  }

  return {
    update_derived_data: update_derived_data,
  };
}

// Add two matrices.
function addMatrices(a, b)
{
  return a.map(function(a_i, i) {
    return a_i.map(function(a_ij, j) { return a_ij + b[i][j]; });
  });
}

function gpRegressionAugmentation(k_func, sigma_n_sq, label_in, label_out)
{
  var mean_matrix;
  var cov_matrix;

  function update_derived_data(data)
  {
    if (!data[label_out])
    {
      data[label_out] = [];
    }

    label_sd = label_out + '_sd'
    if (!data[label_sd])
    {
      data[label_sd] = [];
    }

    _update_matrix(data);
    Object.assign(
      data[label_out], 
      jStat.multiply(jStat(data[label_in]), jStat.transpose(mean_matrix))[0]);
    Object.assign(
      data[label_sd], 
      jStat.transpose(jStat.diag(cov_matrix)).map(v => Math.sqrt(v)));
  }

  function _update_matrix(data)
  {
    // If it exists, we assume it's up to date for performance reasons.
    if (!!mean_matrix) { return; }

    var n = data[label_in].length;
    var noise_matrix = jStat.multiply(jStat.identity(n), sigma_n_sq);
    var k_matrix = CovarianceMatrix(data.x, k_func);

    mean_matrix = jStat.multiply(k_matrix, jStat.inv(addMatrices(k_matrix, noise_matrix)));
    cov_matrix = addMatrices(k_matrix, jStat.multiply(jStat.multiply(mean_matrix, k_matrix), -1));
  }

  return {
    update_derived_data: update_derived_data,
  };
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Gaussian oscillator code

function createCompactSupportOscillators(n, n_t) {
  // A matrix of independent normal samples with n_t rows.
  // At every stage, we will replace the oldest row with brand new samples.
  var random_matrix = jStat.create(n_t, n, () => jStat.normal.sample(0, 1));
  // A matrix where each row is equivalent to the previous, but shifted by one.
  var L_t = LoopingCholesky(CompactSupportCovarianceMatrix(n_t));
  // The row of L_t which holds the vector to use.
  var i = 0;

  var noise = [];

  function setNoise()
  {
    Object.assign(noise, jStat(L_t[i]).multiply(random_matrix)[0]);
  }
  setNoise();

  function advance()
  {
    row = random_matrix[i];
    row.forEach((old_val, j, a) => a[j] = jStat.normal.sample(0, 1), row);
    i = (i + 1) % n_t;
    setNoise();
  }

  return {
    data: { noise: noise, },
    advance: advance,
  };
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Animation code

function createAnimatedPlot(plot, frame_duration) {
  var animation_id = undefined;

  function stop()
  {
    if (!!animation_id)
    {
      cancelAnimationFrame(animation_id)
      animation_id = undefined;
    }
  }

  function start()
  {
    animation_id = requestAnimationFrame(timestamp => _update(timestamp, timestamp));
  }

  function _update(timestamp, next_timestamp)
  {
    if (timestamp >= next_timestamp)
    {
      next_timestamp += frame_duration;
      plot.animateToNextFrame(frame_duration);
    }

    animation_id = requestAnimationFrame(timestamp => _update(timestamp, next_timestamp));
  }

  function toggle()
  {
    if (!!animation_id) { stop(); } else { start(); }
  }

  start();

  return {
    start: start,
    stop: stop,
    toggle: toggle,
  };
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Generic plotting functions

// Get the aesthetic mapping from the trace, defaulting to the label itself.
function getAes(trace, label)
{
  return (trace['aes'] && trace['aes'][label]) || label;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Plotly-specific code

// Convert ribbon specs into plotly format.
//
// Aesthetics: x, ymin, ymax.
function createPlotlyRibbonTraces(trace, dataset)
{
  return [
    {
      y: dataset.data[getAes(trace, 'ymin')],
      showlegend: false,
    },
    {
      y: dataset.data[getAes(trace, 'ymax')],
      fill: 'tonexty',
      fillcolor: trace.fill,
    },
  ].map(d => Object.assign({
    type: 'scatter',
    x: dataset.data[getAes(trace, 'x')],
    line: { width: 0, simplify: false, },
  }, d));
}

// Convert line specs into plotly format.
//
// Aesthetics: x, ymin, ymax.
function createPlotlyLineTrace(trace, dataset)
{
  return {
    type: 'scatter',
    x: dataset.data[getAes(trace, 'x')],
    y: dataset.data[getAes(trace, 'y')],
    line: Object.assign(trace['line'] || {}, { simplify: false, }),
  };
}

// Convert point specs into plotly format.
//
// Aesthetics: x, ymin, ymax.
function createPlotlyPointTrace(trace, dataset)
{
  return Object.assign(createPlotlyLineTrace(trace, dataset), { mode: 'markers', });
}

function getPlotlyTraceConverter(type)
{
  switch (type)
  {
    case 'ribbon':
      return createPlotlyRibbonTraces;
    case 'line':
      return createPlotlyLineTrace;
    case 'point':
      return createPlotlyPointTrace;
    default:
      alert(`Type "${type}" not yet supported for plotly!`);
  };
}

function createPlotlyTraces(specs)
{
  plotly_specs = specs.traces.map(t => getPlotlyTraceConverter(t.type)(t, specs.data));

  // Some plotly specs need multiple plotly traces to work (e.g., ribbon plots).
  // So, we flatten the result, in case any elements are actually arrays.
  return plotly_specs.reduce((result, val) => result.concat(val), []);;
}

function getOrUndef(o, key, ...keys)
{
  if (!o[key])
  {
    return undefined;
  }
  if (!keys.length)
  {
    return o[key];
  }
  return getOrUndef(o[key], ...keys);
}

function createPlotlyLayout(specs)
{
  return {
    yaxis: {
      range: getOrUndef(specs, 'config', 'range', 'y')
    },
  };
}

function createPlotlyPlot(div_id, specs)
{
  var traces = createPlotlyTraces(specs);
  var layout = createPlotlyLayout(specs);

  function animateToNextFrame(duration)
  {
    specs.data.advance();

    Plotly.animate(
      div_id,
      { data: traces, },
      {
        transition: {
          duration: duration,
          easing: 'linear',
        },
        frame: {
          duration: duration,
          redraw: false,
        },
      });
  }

  Plotly.react(div_id, traces, layout);

  return {
    animateToNextFrame: animateToNextFrame,
  };
}
</script>

<script type='text/javascript'>
////////////////////////////////////////////////////////////////////////////////////////////////////
// Defining the figure

var true_function = getExampleFunction();
var num_pts = true_function.x.length;
var noisy_dataset = combine([
  createCompactSupportOscillators(num_pts, 40),
  staticDataset(true_function),
]);
noisy_dataset = augment(
  noisy_dataset,
  mapAugmentations({
    noisy_data: { vars: ['y', 'noise'], xform: ([y, noise]) => y + noise, },
  }));
noisy_dataset = augment(
  noisy_dataset,
  gpRegressionAugmentation(Matern5v2(1, 1), 1, 'noisy_data', 'fit'));
noisy_dataset = augment(
  noisy_dataset,
  mapAugmentations({
    fit_ymax1: { vars: ['fit', 'fit_sd'], xform: ([y, dy]) => y + dy, },
    fit_ymin1: { vars: ['fit', 'fit_sd'], xform: ([y, dy]) => y - dy, },
    fit_ymax2: { vars: ['fit', 'fit_sd'], xform: ([y, dy]) => y + 2 * dy, },
    fit_ymin2: { vars: ['fit', 'fit_sd'], xform: ([y, dy]) => y - 2 * dy, },
  }));
noisy_dataset = augment(
  noisy_dataset,
  gpAugmentation(Matern5v2(1, 1), 'matern5v2'));
noisy_dataset = augment(
  noisy_dataset,
  gpAugmentation(Matern3v2(1, 1), 'matern3v2'));
noisy_dataset = augment(
  noisy_dataset,
  gpAugmentation(SquaredExponential(1, 1), 'squared_exp'));
noisy_dataset = augment(
  noisy_dataset,
  gpAugmentation(Exponential(1, 1), 'exp'));

var new_specs = {
  data: noisy_dataset,
  traces: [
    { type: 'line', aes: { y: 'noisy_data', }, line: { color: '#bbb', }, },
    { type: 'line', aes: { y: 'y', }, line: { color: 'black', }, },
    { type: 'ribbon', aes: { ymin: 'fit_ymin1',  ymax: 'fit_ymax1', }, fill: '#4b48'},
    { type: 'ribbon', aes: { ymin: 'fit_ymax1',  ymax: 'fit_ymax2', }, fill: '#bb48'},
    { type: 'ribbon', aes: { ymin: 'fit_ymin2',  ymax: 'fit_ymin1', }, fill: '#bb48'},
  ],
  config: { range: { y: [-4, 3], }, },
};

var plot = createPlotlyPlot('test_noise', new_specs);
var animation = createAnimatedPlot(plot, 250)

</script>

<script type='text/javascript'>
handleKeyPress = function(e) {
  e = e || window.event;
  switch (String.fromCharCode(e.keyCode)) {
    case 'p':
      animation.toggle();
      break;
    default:
      return;
  }
}

document.addEventListener("keypress", handleKeyPress, false);
</script>
